/* --COPYRIGHT--,BSD_EX
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************
 *
 *                       MSP430 CODE EXAMPLE DISCLAIMER
 *
 * MSP430 code examples are self-contained low-level programs that typically
 * demonstrate a single peripheral function or device feature in a highly
 * concise manner. For this the code may rely on the device's power-on default
 * register values and settings such as the clock configuration and care must
 * be taken when combining code from several examples to avoid potential side
 * effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
 * for an API functional library-approach to peripheral configuration.
 *
 * --/COPYRIGHT--*/
//******************************************************************************
//  MSP430FR231x Demo - Timer0_B3, Toggle P1.0, CCR0 Count Mode ISR, DCO SMCLK
//
//
//  *NOT DESCRIPTION OF CODE BELOW*
//  Original Description: Toggle P1.0 using software and TB_0 ISR. Timer0_B is
//  configured for continuous mode, thus the timer overflows when TBR counts
//  to CCR0. In this example, CCR0 is loaded with 50000.
//  ACLK = n/a, MCLK = SMCLK = TBCLK = default DCO = ~1MHz
//
//           MSP430FR2311
//         ---------------
//     /|\|               |
//      | |               |
//      --|RST            |
//        |               |
//        |           P1.0|-->LED
//
//
//   Darren Lu
//   Texas Instruments Inc.
//   July 2015
//   Built with IAR Embedded Workbench v6.30 & Code Composer Studio v6.1
//******************************************************************************

//Sample code by TI
//Edited by Michael Sorce
//Last updated 9/24/18


//Description: Code toggles 2 LEDs using Timer1_B0 and Timer0_B0 interrupt services at difference clock speeds

//include msp430 header file
#include <msp430.h>

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;                     // Stop Watchdog timer

    // Configure GPIO
    P1DIR |= BIT0;                                // P1.0 output (LED)
    P1OUT |= BIT0;                                // P1.0 high (Turns LED on)

    P2DIR |= BIT0;                                // P2.0 output (LED)
    P2OUT |= BIT0;                                // P2.0 high (Turns LED on)

    // Disable the GPIO power-on default high-impedance mode to activate
    // previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;

    TB0CCTL0 |= CCIE;                            // TB0CCR0 interrupt enabled
    TB0CCR0 = 50000;                             // CCR0 set to 50000 clock cycles
    TB0CTL |= TBSSEL__SMCLK | MC__UP | ID_3;     // SMCLK, UP mode, /8 clock speed

    TB1CCTL0 |= CCIE;                             // TB1CCR0 interrupt enabled
    TB1CCR0 = 10000;                              // CCR0 set to 10000 clock cycles
    TB1CTL |= TBSSEL__SMCLK | MC__UP | ID_3;      // SMCLK, UP mode, /8 clock speed

    __bis_SR_register(LPM0_bits | GIE);           // Enter LPM3 w/ interrupts
    __no_operation();                             // For debug
}

// Timer0 B0 interrupt service routine
#pragma vector = TIMER0_B0_VECTOR
__interrupt void Timer_B0 (void)
{
    P1OUT ^= BIT0; // toggle LED 1
}

// Timer1 B0 interrupt service routine
#pragma vector = TIMER1_B0_VECTOR
__interrupt void Timer_B1 (void)
{
    P2OUT ^= BIT0; // toggle LED 2
}
